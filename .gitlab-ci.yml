stages:
  - test

variables:
  SERVER_CERT: "server.crt"
  SERVER_KEY: "server.key"
  CA_CERT: "ca.crt"
  CLIENT_CERT: "client.crt"
  CLIENT_KEY: "client.key"

test_log_injection:
  stage: test
  image: golang:1.24
  script:
    # Save TLS certs from CI variables or artifacts (you need to set these securely in GitLab)
    - echo "$SERVER_CERT_CONTENT" > $SERVER_CERT
    - echo "$SERVER_KEY_CONTENT" > $SERVER_KEY
    - echo "$CA_CERT_CONTENT" > $CA_CERT
    - echo "$CLIENT_CERT_CONTENT" > $CLIENT_CERT
    - echo "$CLIENT_KEY_CONTENT" > $CLIENT_KEY

    # Build the Knox server binary
    - go build -o knox-server ./cmd/dev_server

    # Start Knox server in background
    - ./knox-server --http :9000 --cert $SERVER_CERT --key $SERVER_KEY --ca $CA_CERT > knox.log 2>&1 &
    - sleep 3

    # Send the malicious request with injected newlines in the key path
    - curl --cert $CLIENT_CERT --key $CLIENT_KEY --cacert $CA_CERT -k "https://localhost:9000/v1/keys/%0Ainjected:true%0A"

    # Check if injection string appears in logs
    - if grep -q "injected:true" knox.log; then echo "Log injection succeeded"; else echo "Log injection failed" && exit 1; fi
