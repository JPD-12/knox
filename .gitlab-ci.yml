stages:
  - generate-certs
  - build
  - test
  - poc

variables:
  GOCACHE: "$CI_PROJECT_DIR/.cache"

generate_certs:
  stage: generate-certs
  image: alpine:latest
  script:
    - apk add --no-cache openssl
    - mkdir -p certs
    # Create CA key and cert
    - openssl ecparam -name prime256v1 -genkey -noout -out certs/ca.key
    - openssl req -x509 -new -nodes -key certs/ca.key -sha256 -days 1 -out certs/ca.crt -subj "/CN=MyCA"
    - openssl ecparam -name prime256v1 -genkey -noout -out certs/server.key
    - openssl req -new -key certs/server.key -out certs/server.csr -subj "/CN=localhost"
    - openssl x509 -req -in certs/server.csr -CA certs/ca.crt -CAkey certs/ca.key -CAcreateserial -out certs/server.crt -days 1 -sha256
    - openssl ecparam -name prime256v1 -genkey -noout -out certs/client.key
    - openssl req -new -key certs/client.key -out certs/client.csr -subj "/CN=admin"
    - openssl x509 -req -in certs/client.csr -CA certs/ca.crt -CAkey certs/ca.key -CAcreateserial -out certs/client.crt -days 1 -sha256
  artifacts:
    paths:
      - certs/

before_script:
  - go version

build:
  stage: build
  script:
    - go build -o knox-dev-server ./cmd/dev_server

test:
  stage: test
  script:
    - go test -v ./...

poc:
  stage: poc
  image: golang:1.20
  script:
    # Run the Knox dev server in background
    - go build -o knox-server knox-server-1/main.go
    - ./knox-server --http :9000 --cert certs/server.crt --key certs/server.key --ca certs/ca.crt &
    - sleep 2
    # Simulate forged request (victim thinks this is valid mTLS client)
    - |
      curl --cert certs/client.crt --key certs/client.key --cacert certs/ca.crt -k \
        https://localhost:9000/v1/keys/foo
